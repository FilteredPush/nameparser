/* test.jj scientific name parsing */
options {
   STATIC = false ;
   UNICODE_INPUT = true;
   LOOKAHEAD = 6;
   //DEBUG_PARSER = true;
   //DEBUG_LOOKAHEAD = true;
   //DEBUG_TOKEN_MANAGER= true;
}
PARSER_BEGIN(NameParse)
   // package org.filteredpush.sciname.parser;

   import java.util.ArrayList;
   import java.util.List;
   import java.util.HashMap;
   import java.util.Map;
   import java.util.Iterator;
   import java.io.IOException;
   import java.io.BufferedReader;
   import java.io.ByteArrayInputStream;
   import java.io.InputStreamReader;

   class NameParse {

      public static void main( String[] args ) throws ParseException, TokenMgrError {
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
            ArrayList<Map<String,String>> result = new ArrayList<Map<String,String>>();
            String line;
            try {
               while ((line = reader.readLine()) != null) {
                  result.add(NameParse.doParse(line));
               }
            } catch (IOException e) { 
               System.out.println(e.getMessage());
            }
            Iterator<Map<String,String>> i = result.iterator();
            while (i.hasNext()) { 
               Map<String,String> row = i.next();
               if (!row.containsKey("Error")) {  row.remove("OriginalValue"); }
               System.out.println(row);
            }
      }

     /**
      * Parse a scientific name into its component parts.  
      *
      * @param line a scientific name to parse 
      * @return a List of a Map of key value pairs describing components of the scientific name.
      */
     public static Map<String,String> doParse(String line) { 
         Map<String,String> result = new HashMap<String,String>();
         try { 
             line = line.replaceAll("\t"," ").replaceAll("\n"," ").replaceAll("\r"," ").trim();
             if (line.matches("^[a-z]+$")) {
                  // One word, all lower case, a trivial epithet without it's genus. 
                  result.put("Pathology","Bare Epithet" );
                  result.put("Species",line); 
                  result.put("OriginalValue",line);
             } else { 
                  ArrayList<String> extraneous =  new ArrayList<String>();
                  extraneous.add(" nov sp.");
                  extraneous.add(" nom. illeg.");
                  extraneous.add(" nom. nud.");
                  extraneous.add(" nom.nud.");
                  extraneous.add(" nomen nudem");
                  extraneous.add(" nom. rej.");
                  extraneous.add(" nom. cons.");
                  extraneous.add(" nom. prov.");
                  extraneous.add(" nom.prov.");
                  extraneous.add("(?)");
                  extraneous.add("?");
                  extraneous.add("(pro sp.)");  // transfered from non-hybrid to hybrid
                  extraneous.add("(pro hybr)."); // transfered from hybrid to non-hybrid)
                  extraneous.add(" sp. indet.");
                  extraneous.add(" sp. ind.");
                  extraneous.add(" sp.");
                  extraneous.add(" spp. indet." );
                  extraneous.add(" spp.");
                  Iterator<String> i = extraneous.iterator();
                  String cleaned = line;
                  StringBuilder extraneousBits = new StringBuilder();
                  while (i.hasNext()) { 
                      String extra = i.next();
                      if (cleaned.contains(extra)) { 
                         cleaned = cleaned.replace(extra,"");
                         extraneousBits.append(extra).append(" ");
                      }
                  }
                  NameParse parser = new NameParse( new ByteArrayInputStream(cleaned.getBytes())) ;
                  result = parser.Parse();
                  result.put("OriginalValue",line);
                  if (extraneousBits.length()!=0) { result.put("RemovedExtra",extraneousBits.toString().trim()); } 
             } 
         } catch (ParseException ex) { 
             result.put("Error","Unable to parse");
             result.put("OriginalValue",line);
             //System.out.println("Unable to parse: " + line );
         } catch (TokenMgrError err) { 
             result.put("Error","Unable to tokenize");
             result.put("OriginalValue",line);
             //System.out.println("Unable to tokenize: " + line );
         }
         return result;
     }

   }
PARSER_END(NameParse)

SKIP : { " " }
TOKEN : { < UWORD : <UPPER>(<LOWER>)+ > :NOTSTARTOFLINE }

<NOTSTARTOFLINE>SKIP : { " " }
<DEFAULT,NOTSTARTOFLINE>TOKEN : { < HYBRID: "×" > }  // multiplication sign
<NOTSTARTOFLINE>TOKEN : { < LWORD : (<LOWER>)+ > }
<DEFAULT,NOTSTARTOFLINE>TOKEN : { < #UPPER: ["A"-"Z"] > }
<NOTSTARTOFLINE>TOKEN : { < RANK : "subspecies" | "subsp." | "variety" | "var." | "var" | "nothovar" | "nothovar." | "nothof." | "f." | "forma" | "form" | "prol."  > }
<NOTSTARTOFLINE>TOKEN : { < SUBSEQUENTCITATION : ": "<NAMESET>((<COMMA>){0,1}([" "])*<YEAR>){0,1} > }
<NOTSTARTOFLINE>TOKEN : { < YEAR : (["0"-"9"]){4} | "["(["0"-"9"]){4}"]" > }
<NOTSTARTOFLINE>TOKEN : { < YEARBIT : (<COMMA>){0,1}([" "])*<YEAR> > }
<DEFAULT,NOTSTARTOFLINE>TOKEN : { < #LOWER : ["a"-"z","-"] > }
<NOTSTARTOFLINE>TOKEN : { < AUTHORSHIP :
   "("<NAMESETYEAR>")"
   | <NAMESETYEAR>
   | "("<NAMESETYEAR>")"([" "])*<NAMESETYEAR>
>
| 
< #NAMESETYEAR : <NAMESET>(<YEARBIT>)*  >
|
< #AND : " & " | " and " | " et " | " in " | " ex " | ": " | "," | ", " > 
| 
< #NAMESET: <NAME>((<AND>){0,1}<NAME>)* >
|
< #NAME : (<INITIALS>)*(<PREFIX>){0,1}<WORD>([" ","-"]<WORD>)*(<SUFFIX>){0,1} > 
|
< #INITIALS : (<UPPER>(["."," "])+)+ >
|
< #WORD : <LATERUWORD> | (<UALPHA>(<LALPHAPUNC>)+)+ |  (<LALPHA>|<UALPHA>)["'"]<UALPHA>(<LALPHAPUNC>)+  | (<UALPHA>)+ > 
|
< #PREFIX : "v"["o","a"]"n " | "[" | ["D","d"]"e "  | "de la " | "v"["a","o"]"n de"["n","r"]" " >
|
< #SUFFIX : " I"(["I"])+ | " et al." | "]" | " f." >
|
< #COMMA : ","  > 
| 
< #UALPHA : <UPPER> | ["À","Á","Â","Ã","Ä","Å","Ç","È","É","Ê","Ë","Ì","Í","Î","Ï","Ñ","Ò","Ó","Ô","Õ","Ö","Ø","Š","Ù","Ú","Û","Ü","Ż"] >
|
< #LALPHAPUNC : <LALPHA> | ["&",".","'"]  > 
|
< #LALPHA : <LOWER> | ["à","á","â","ã","ä","å","æ","č","ć","è","é","ê","ë","ě","ì","í","î","ï","ň","ñ","ń","ò","ó","ô","õ","ö","ø","ù","ú","û","ü","ý","ÿ","ç"]  >
}
<NOTSTARTOFLINE>TOKEN : { < LATERUWORD : <UPPER>(<LOWER>)+ > }

protected Map<String,String> Parse() :
{  
   Token t;
   String genus;
   Boolean namedHybrid;
   String subgenus;
   String species;
   String subspecies;
   String infraspecies;
   String rank;
   String authorship;
   String subsequentcitation;
   List<String> hgenera;
   List<String> hspecies;
   List<String> hsubspecies;
   HashMap<String,String> result = new HashMap<String,String>();
}
{
    genus = Genus()
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    authorship = Authorship()
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      result.put("Authorship",authorship); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <AUTHORSHIP>
      {  
         subgenus = t.toString(); 
         if (!subgenus.matches("[(][A-Z][a-z]+[)]")) { subgenus=""; } 
      } 
    )
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    authorship = Authorship()
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      if (subgenus.length()>0) { result.put("Subgenus",subgenus); }
      result.put("Authorship",authorship); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <AUTHORSHIP>
      {  
         subgenus = t.toString(); 
         if (!subgenus.matches("[(][A-Z][a-z]+[)]")) { subgenus=""; } 
      } 
    )
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      if (subgenus.length()>0) { result.put("Subgenus",subgenus); }
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <HYBRID>
      { namedHybrid = true; } 
    )
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    authorship = Authorship()
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      result.put("Authorship",authorship); 
      result.put("NamedHybrid","true"); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <LWORD>
      { species = t.toString();  } 
    )
    authorship = Authorship()
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      result.put("Authorship",authorship); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <RANK>
      { rank = t.toString(); } 
    )
    (
      t = <LWORD>
      { subspecies = t.toString(); } 
    )
    authorship = Authorship()
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      result.put("Subspecies",subspecies); 
      result.put("Rank",rank); 
      if (rank.startsWith("notho")) { result.put("NamedHybrid","true"); }
      result.put("Authorship",authorship); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <LWORD>
      { subspecies = t.toString(); } 
    )
    (
      t = <LWORD>
      { infraspecies = t.toString(); } 
    )
    authorship = Authorship()
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      result.put("Subspecies",subspecies); 
      result.put("Infraspecies",infraspecies); 
      result.put("Authorship",authorship); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <LWORD>
      { subspecies = t.toString(); } 
    )
    (
      t = <LWORD>
      { infraspecies = t.toString(); } 
    )
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      result.put("Subspecies",subspecies); 
      result.put("Infraspecies",infraspecies); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <LWORD>
      { subspecies = t.toString(); } 
    )
    (
      t = <RANK>
      { rank = t.toString(); } 
    )
    (
      t = <LWORD>
      { infraspecies = t.toString(); } 
    )
    authorship = Authorship()
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      result.put("Subspecies",subspecies); 
      result.put("Infraspecies",infraspecies); 
      result.put("Rank",rank); 
      result.put("Authorship",authorship); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <LWORD>
      { subspecies = t.toString(); } 
    )
    (
      t = <RANK>
      { rank = t.toString(); } 
    )
    (
      t = <LWORD>
      { infraspecies = t.toString(); } 
    )
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      result.put("Subspecies",subspecies); 
      result.put("Rank",rank); 
      result.put("Infraspecies",infraspecies); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <RANK>
      { rank = t.toString(); } 
    )
    (
      t = <LWORD>
      { infraspecies = t.toString(); } 
    )
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      result.put("Rank",rank); 
      result.put("Infraspecies",infraspecies); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <AUTHORSHIP>
      {  
         subgenus = t.toString(); 
         if (!subgenus.matches("[(][A-Z][a-z]+[)]")) { subgenus=""; } 
      } 
    )
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <RANK>
      { rank = t.toString(); } 
    )
    (
      t = <LWORD>
      { infraspecies = t.toString(); } 
    )
    authorship = Authorship()
    <EOF>
    { 
      result.put("Genus",genus);
      if (subgenus.length()>0) { result.put("Subgenus",subgenus); }
      result.put("Species",species); 
      result.put("Rank",rank); 
      result.put("Infraspecies",infraspecies); 
      result.put("Authorship",authorship); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <AUTHORSHIP>
      {  
         subgenus = t.toString(); 
         if (!subgenus.matches("[(][A-Z][a-z]+[)]")) { subgenus=""; } 
      } 
    )
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <LWORD>
      { subspecies = t.toString(); } 
    )
    (
      t = <LWORD>
      { infraspecies = t.toString(); } 
    )
    authorship = Authorship()
    <EOF>
    { 
      result.put("Genus",genus);
      if (subgenus.length()>0) { result.put("Subgenus",subgenus); }
      result.put("Species",species); 
      result.put("Subspecies",subspecies); 
      result.put("Infraspecies",infraspecies); 
      result.put("Authorship",authorship); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <AUTHORSHIP>
      {  
         subgenus = t.toString(); 
         if (!subgenus.matches("[(][A-Z][a-z]+[)]")) { subgenus=""; } 
      } 
    )
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <LWORD>
      { subspecies = t.toString(); } 
    )
    (
      t = <RANK>
      { rank = t.toString(); } 
    )
    (
      t = <LWORD>
      { infraspecies = t.toString(); } 
    )
    authorship = Authorship()
    <EOF>
    { 
      result.put("Genus",genus);
      if (subgenus.length()>0) { result.put("Subgenus",subgenus); }
      result.put("Species",species); 
      result.put("Subspecies",subspecies); 
      result.put("Infraspecies",infraspecies); 
      result.put("Rank",rank); 
      result.put("Authorship",authorship); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <AUTHORSHIP>
      {  
         subgenus = t.toString(); 
         if (!subgenus.matches("[(][A-Z][a-z]+[)]")) { subgenus=""; } 
      } 
    )
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <LWORD>
      { subspecies = t.toString(); } 
    )
    authorship = Authorship()
    <EOF>
    { 
      result.put("Genus",genus);
      if (subgenus.length()>0) { result.put("Subgenus",subgenus); }
      result.put("Species",species); 
      result.put("Subspecies",subspecies); 
      result.put("Authorship",authorship); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <AUTHORSHIP>
      {  
         subgenus = t.toString(); 
         if (!subgenus.matches("[(][A-Z][a-z]+[)]")) { subgenus=""; } 
      } 
    )
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <LWORD>
      { subspecies = t.toString(); } 
    )
    <EOF>
    { 
      result.put("Genus",genus);
      if (subgenus.length()>0) { result.put("Subgenus",subgenus); }
      result.put("Species",species); 
      result.put("Subspecies",subspecies); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <LWORD>
      { subspecies = t.toString(); } 
    )
    authorship = Authorship()
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      result.put("Subspecies",subspecies); 
      result.put("Authorship",authorship); 
      return result ;
    }
  | 
    genus = Genus()
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <LWORD>
      { subspecies = t.toString(); } 
    )
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      result.put("Subspecies",subspecies); 
      return result ;
    }
  | 
    //LOOKAHEAD(4)
    genus = Genus()
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    (
      t = <SUBSEQUENTCITATION>
      { subsequentcitation = t.toString().substring(1); } 
    )
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      result.put("SubsequentCitation",subsequentcitation); 
      return result ;
    }
  | 
    //LOOKAHEAD(4)
    { authorship = ""; }
    genus = Genus()
    (
      t = <AUTHORSHIP>
      {  
         subgenus = t.toString(); 
         if (!subgenus.matches("[(][A-Z][a-z]+[)]")) { subgenus=""; authorship = t.toString(); }
      }
    )
    authorship = Authorship()
    <EOF>
    { 
      result.put("Genus",genus);
      if (subgenus.length()>0) { result.put("Subgenus",subgenus); }
      result.put("Authorship",authorship); 
      return result ;
    }
  | 
    //LOOKAHEAD(2)
    genus = Genus()
    (
      t = <LWORD>
      { species = t.toString(); } 
    )
    <EOF>
    { 
      result.put("Genus",genus);
      result.put("Species",species); 
      return result ;
    }
  | 
    genus = Genus()
    (
      (
        t = <AUTHORSHIP>
        { subgenus = t.toString(); } 
      )
      { 
        if (!subgenus.matches("[(][A-Z][a-z]+[)]")) { 
           if (subgenus.matches("[(][A-Z][a-z]+[)].+")) {
               authorship=subgenus.substring(subgenus.indexOf(")")+1).trim(); 
               subgenus=subgenus.substring(0,subgenus.indexOf(")")+1).trim(); 
           } else {  
               authorship=subgenus; subgenus=""; 
           }
        } else { 
           authorship=""; 
        } 
      }
    )
    <EOF>
    { 
      result.put("Genus",genus);
      if (subgenus.length()>0) { result.put("Subgenus",subgenus); }
      if (authorship.length()>0) { result.put("Authorship",authorship); }
      return result ;
    }
  | 
    (
      t = <HYBRID>
      { namedHybrid = true; } 
    )
    genus = Genus()
    (  
      subgenus = Authorship()
      { 
        if (!subgenus.matches("[(][A-Z][a-z]+[)]")) { 
           if (subgenus.matches("[(][A-Z][a-z]+[)].+")) {
               authorship=subgenus.substring(subgenus.indexOf(")")+1).trim(); 
               subgenus=subgenus.substring(0,subgenus.indexOf(")")+1).trim(); 
           } else {  
               authorship=subgenus; subgenus=""; 
           }
        } else { 
           authorship=""; 
        } 
      }
    )
    <EOF>
    { 
      result.put("Genus",genus);
      if (subgenus.length()>0) { result.put("Subgenus",subgenus); }
      if (authorship.length()>0) { result.put("Authorship",authorship); }
      result.put("NamedHybrid","true"); 
      return result ;
    }
  |
    (
      t = <HYBRID>
      { namedHybrid = true; } 
    )
    genus = Genus()
    <EOF>
       { 
         result.put("Genus",genus); 
         result.put("NamedHybrid","true"); 
         return result ;
       } 
  |
    genus = Genus()
    <EOF>
       { 
         result.put("Genus",genus); 
         return result ;
       } 
}

String Genus() :
{
   Token t;
   String genus;
}
{
    ( 
       t = <UWORD>
       { genus = t.toString(); }
       { return genus ; } 
    ) 
}

String Authorship() : 
{
    Token t;
    String authorship;
}
{
    (
      t = <AUTHORSHIP>
      { authorship = t.toString(); return authorship; } 
    )
    |
    (
      t = <LATERUWORD>
      { authorship = t.toString(); return authorship; } 
    )
}
